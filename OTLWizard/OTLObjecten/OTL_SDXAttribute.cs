using System.Xml;
using static OTLWizard.OTLObjecten.Enums;

namespace OTLWizard.OTLObjecten
{
    public class OTL_SDXAttribute
    {

        private string element_name;
        private string element_type;
        private string element_fdo_hasMeasure;
        private string element_fdo_readOnly;
        private string element_fdo_autogenerated;
        private string element_fdo_hasElevation;
        private string element_fdo_srsName;
        private string element_fdo_geometricTypes;
        private string element_fdo_geometryTypes;
        private string element_annotation_documentation_innerText;
        private string element_minOccurs;
        private string element_default;
        private string element_base;
        private string[] element_enumeration_values;
        private SDFAttributeTypes attrtype;


        private XmlDocument document;

        public OTL_SDXAttribute(XmlDocument document, string attribute_name, string attribute_desciption, string attribute_default, string[] keuzelijstopties, SDFAttributeTypes attrtype, string geometryTypes = "point ")
        {
            element_name = attribute_name.Replace(".", "_"); // dotnatie replacement
            element_type = "gml:AbstractGeometryType";
            element_fdo_hasMeasure = "false";
            element_fdo_readOnly = "true";
            element_fdo_autogenerated = "true";
            element_fdo_hasElevation = "true";
            element_fdo_srsName = "Default";
            element_fdo_geometricTypes = geometryTypes;
            element_fdo_geometryTypes = geometryTypes;
            element_annotation_documentation_innerText = attribute_desciption;
            element_minOccurs = "0";
            element_default = attribute_default; // enkel bij keuzelijsten
            // check attrtype
            switch (attrtype)
            {
                case SDFAttributeTypes.Simple:
                    element_base = "xs:string";
                    break;
                case SDFAttributeTypes.List:
                    element_base = "xs:string";
                    break;
                case SDFAttributeTypes.Real:
                    element_base = "xs:decimal";
                    break;
                case SDFAttributeTypes.Integer:
                    element_base = "xs:int";
                    break;
                case SDFAttributeTypes.Bool:
                    element_base = "xs:boolean";
                    break;
                case SDFAttributeTypes.Geometry:
                    break;
                case SDFAttributeTypes.FeatId:
                    element_base = "xs:int";
                    break;
                default:
                    element_base = "xs:string";
                    break;
            }
            if (keuzelijstopties != null)
                element_enumeration_values = keuzelijstopties;

            // attributetype definition
            this.document = document;
            this.attrtype = attrtype;
        }

        public void AppendXml(XmlElement appendTo)
        {
            // setup base
            XmlElement element = createXsElement(appendTo, "element");
            XmlElement annotation = createXsElement(element, "annotation");
            if (element_annotation_documentation_innerText.Length > 159)
                createXsElement(annotation, "documentation").InnerText = element_annotation_documentation_innerText.Substring(0, 159);
            else
                createXsElement(annotation, "documentation").InnerText = element_annotation_documentation_innerText;

            // setup default values for all
            element.SetAttribute("name", element_name);

            // per type setup
            switch (attrtype)
            {
                case Enums.SDFAttributeTypes.FeatId:
                    element.SetAttribute("readOnly", "http://fdo.osgeo.org/schemas", element_fdo_readOnly);
                    element.SetAttribute("autogenerated", "http://fdo.osgeo.org/schemas", element_fdo_autogenerated);
                    XmlElement simpletype = createXsElement(element, "simpleType");
                    createXsElement(simpletype, "restriction").SetAttribute("base", element_base);
                    break;
                case Enums.SDFAttributeTypes.Geometry:
                    element.SetAttribute("type", element_type);
                    element.SetAttribute("hasMeasure", "http://fdo.osgeo.org/schemas", element_fdo_hasMeasure);
                    element.SetAttribute("hasElevation", "http://fdo.osgeo.org/schemas", element_fdo_hasElevation);
                    element.SetAttribute("srsName", "http://fdo.osgeo.org/schemas", element_fdo_srsName);
                    element.SetAttribute("geometricTypes", "http://fdo.osgeo.org/schemas", element_fdo_geometricTypes);
                    element.SetAttribute("geometryTypes", "http://fdo.osgeo.org/schemas", element_fdo_geometryTypes);
                    break;
                case Enums.SDFAttributeTypes.Simple:
                    element.SetAttribute("minOccurs", element_minOccurs);
                    element.SetAttribute("default", element_default);
                    XmlElement simpletype2 = createXsElement(element, "simpleType");
                    XmlElement restriction2 = createXsElement(simpletype2, "restriction");
                    restriction2.SetAttribute("base", element_base);
                    createXsElement(restriction2, "maxLength").SetAttribute("value", "9999");

                    break;
                case Enums.SDFAttributeTypes.Real:
                    element.SetAttribute("minOccurs", element_minOccurs);
                    element.SetAttribute("default", element_default);
                    XmlElement simpletype3 = createXsElement(element, "simpleType");
                    XmlElement restriction1 = createXsElement(simpletype3, "restriction");
                    restriction1.SetAttribute("base", element_base);
                    createXsElement(restriction1, "totalDigits").SetAttribute("value", "19");
                    createXsElement(restriction1, "fractionDigits").SetAttribute("value", "10");
                    break;
                case Enums.SDFAttributeTypes.Integer:
                    element.SetAttribute("minOccurs", element_minOccurs);
                    element.SetAttribute("default", element_default);
                    XmlElement simpletype4 = createXsElement(element, "simpleType");
                    createXsElement(simpletype4, "restriction").SetAttribute("base", element_base);
                    break;
                case Enums.SDFAttributeTypes.Bool:
                    element.SetAttribute("minOccurs", element_minOccurs);
                    element.SetAttribute("default", element_default);
                    XmlElement simpletype5 = createXsElement(element, "simpleType");
                    createXsElement(simpletype5, "restriction").SetAttribute("base", element_base);
                    break;
                case Enums.SDFAttributeTypes.List:
                    element.SetAttribute("minOccurs", element_minOccurs);
                    element.SetAttribute("default", element_default);
                    XmlElement simpletype6 = createXsElement(element, "simpleType");
                    XmlElement restriction = createXsElement(simpletype6, "restriction");
                    restriction.SetAttribute("base", element_base);
                    createXsElement(restriction, "maxLength").SetAttribute("value", "50"); // na te kijken!
                    foreach (string item in element_enumeration_values)
                    {
                        createXsElement(restriction, "enumeration").SetAttribute("value", item);
                    }
                    break;
                default:
                    break;
            }
        }

        private XmlElement createXsElement(XmlElement root, string name)
        {
            return (XmlElement)root.AppendChild(document.CreateElement("xs", name, "http://www.w3.org/2001/XMLSchema"));
        }


    }
}
